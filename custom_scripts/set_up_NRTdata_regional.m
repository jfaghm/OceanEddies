function set_up_NRTdata_regional(NetCDF_files_path, ssh_NetCDF_name, lat_NetCDF_name, lon_NetCDF_name, lonlimit, latlimit, ssh_save_path)

% Modified @ 4 April 2018 - Area map function 
%                @ 3 May 2018 - Directory in Directory for input data
%                @ 3 May 2018 - added NRT in the name
% Inputs:
%   NetCDF_files_path: The directory path to the NetCDF files.
%   ssh_NetCDF_name: The name of the variable inside the NetCDF file that
%                    corresponds to the SSH data.
%   lat_NetCDF_name: The name of the variable inside the NetCDF file that
%                    corresponds to the latitude data.
%   lon_NetCDF_name: The name of the variable inside the NetCDF file that
%                    corresponds to the longitude data.
%   ssh_save_path: The directory where you want resulting SSH, latitude,
%                  longitude, and other .mat data that is generated by this
%                  function saved.
% ADDITIONAL:
%  lonlimit: this accept only positive range of longitude. Ex lonlimit = [0, 360]
%  latlimit: either positive and negative accepted based on hemisphere

% Checking paths and creating directory
if ~strcmp(NetCDF_files_path(end), '/')
    NetCDF_files_path = strcat(NetCDF_files_path, '/');
end
if ~strcmp(ssh_save_path(end), '/')
    ssh_save_path = strcat(ssh_save_path, '/');
end
if ~exist(ssh_save_path, 'dir')
    mkdir(ssh_save_path);
end
% Checking longitude and latitude limits
if ~(min(lonlimit) >= 0 && max(lonlimit) <= 360)
    error('longitude limit must be positive and between 0 to 360')
end
if ~(min(abs(latlimit)) >= 0 && max(abs(latlimit)) <= 180)
    error('latitude limit must be between 0 to 180')
end
% Main code
disp('Generating dates.');
dates = generate_dates_nc(NetCDF_files_path);
save([ssh_save_path, 'dates.mat'], 'dates');
%
disp('Getting latitude and longitude information.');
[lat, lon] = get_lat_and_lon(NetCDF_files_path, lat_NetCDF_name, lon_NetCDF_name, lonlimit, latlimit);
save([ssh_save_path, 'lat.mat'], 'lat');
save([ssh_save_path, 'lon.mat'], 'lon');
%
disp('Generating area map.');
create_area_map(lat, lon, ssh_save_path);
disp('Extracting SSH data from NetCDF files.');
extract_ssh_data(NetCDF_files_path, ssh_NetCDF_name, lat_NetCDF_name, lon_NetCDF_name, lonlimit, latlimit, ssh_save_path);
end
% Supporting functions
function par_save(filename, data)
save(filename, 'data');
end
%
function lat_save(filename, lat)%#ok
save(filename, 'lat');
end
%
function lon_save(filename, lon)%#ok
save(filename, 'lon');
end
%
function [lat, lon] = get_lat_and_lon(NetCDF_files_path, lat_name, lon_name, lonlimit, latlimit)
files = dir(NetCDF_files_path);
for i = 1:length(files)
    if files(i).isdir && ~isequal(files(i).name, '.') && ~isequal(files(i).name, '..')
        [lat, lon] = get_lat_and_lon([NetCDF_files_path, files(i).name, '/'], lat_name, lon_name, lonlimit, latlimit);
        continue;
    end
    file = files(i).name;
    [~, ~, ext] = fileparts([NetCDF_files_path, file]);
    if strcmp(ext, '.nc')
        lat = ncread([NetCDF_files_path, file], lat_name);
        lon = ncread([NetCDF_files_path, file], lon_name);
        lt = lat >= min(latlimit)  & lat <= max(latlimit); % ADDITIONAL
        ln = lon >= min(lonlimit) & lon <= max(lonlimit); % ADDITIONAL
        lat = lat(lt); lon = lon(ln);
        if ~isa(lat, 'double')
            lat = double(lat);
        end
        if ~isa(lon, 'double')
            lon = double(lon);
        end
        return;
    end
end
end
%
function extract_ssh_data(NetCDF_files_path, ssh_NetCDF_name, lat_NetCDF_name, lon_NetCDF_name, lonlimit, latlimit, ssh_save_path) 
% Changed two variable lat and lon
files = dir(NetCDF_files_path);
parfor i = 1:length(files)
    if files(i).isdir && ~isequal(files(i).name, '.') && ~isequal(files(i).name, '..')
        extract_ssh_data([NetCDF_files_path, files(i).name, '/'], ssh_NetCDF_name, lat_NetCDF_name, lon_NetCDF_name, lonlimit, latlimit, ssh_save_path);
        continue;
    end
    file = files(i).name;
    [~, name, ext] = fileparts([NetCDF_files_path, file]);
    if strcmp(ext, '.nc')
        ssh = ncread([NetCDF_files_path, file], ssh_NetCDF_name);
        lat = ncread([NetCDF_files_path, file], lat_NetCDF_name); % ADDITIONAL
        lon = ncread([NetCDF_files_path, file], lon_NetCDF_name); % ADDITIONAL
        lt = lat >= min(latlimit)  & lat <= max(latlimit); % ADDITIONAL
        ln = lon >= min(lonlimit) & lon <= max(lonlimit); % ADDITIONAL
        lat = lat(lt); lon = lon(ln); % ADDITIONAL
        ssh = ssh(ln, lt); % ADDITIONAL
        [x, y] = size(ssh);
        if x == length(lon) && y == length(lat)
            ssh = ssh';
        end
        indices = regexp(name, '[0-9]');
        numbers = name(indices);
        date = numbers(1:8);
        par_save([ssh_save_path, 'ssh_', date, '.mat'], ssh);
    end
end
end
% Generate dates
function [dates] = generate_dates_nc(path)
if ~strcmp(path(end), '/')
    path = strcat(path, '/');
end
files = dir(path);
x = 0;
for i = 1:length(files)
    if ~isempty(strfind(files(i).name, 'nrt_global_'))
        x = x + 1;
    end
end
dates = zeros(x, 1);
x = 1;
for i = 1:length(files)
    if files(i).isdir && ~isequal(files(i).name, '.') && ~isequal(files(i).name, '..')
        disp(['File name ', files(i).name]);
        rec_dates = generate_dates_nc([path, files(i).name, '/']);
        for j = 1:length(rec_dates)
            dates(x) = rec_dates(j);
            x = x + 1;
        end
        continue;
    end
    file = files(i).name;
    [~, ~, ext] = fileparts([path, file]);
    if strcmp(ext, '.nc')
        vals = regexp(file, '[0-9]');
        date = file(vals);
        date = date(1:8);
        date = str2double(date);
        dates(x) = date;
        x = x + 1;
    end
end
end
% New algorithm to generate area map vector
function create_area_map(latitude, longitude, save_path)

area_map = zeros(length(latitude), 1);
earth_ellipsoid = referenceSphere('earth', 'km');
%
extlat = latitude;
extlat(end + 1) = extlat(end) + mean(diff(latitude));
nlat = length(extlat);
for i = 1:(nlat-1)
    area_map(i) = areaquad(extlat(i), longitude(1), extlat(i+1), longitude(2), earth_ellipsoid);
end
save([save_path,'area_map.mat'], 'area_map')
end